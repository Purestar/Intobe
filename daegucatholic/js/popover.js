import{r}from"./lit-element.js";import{x as p}from"./if-defined.js";import{p as f,i as d,c as g}from"./core.js";const a=new Set;class u extends f(r){static get properties(){return{action:{type:String,reflect:!0},dialogElem:{type:String,attribute:!1,reflect:!0},position:{type:String,reflect:!0},positionLeft:{type:Number,reflect:!0},positionTop:{type:Number,reflect:!0},isActive:{type:Boolean,attribute:!1}}}constructor(){super(),this.customClass=this.getAttribute("custom-class")||null,this.defaultClass=this.getAttribute("default-class")||"popover",this.typeClass=this.getAttribute("type")||"type",this.isWrapper=!1,this.action=this.getAttribute("action")||"mouseover",this.bestPosition=[],this.isActive=!1,this.position=this.getAttribute("position")||"center",this.data=[],this.debugComponentMessage={액션:{key:"action",value:this.action},"팝오버 내용":{key:"content",value:this.content},위치:{key:"position",value:this.position},좌측기준위치:{key:"positionLeft",value:this.positionLeft},상측기준위치:{key:"positionTop",value:this.positionTop}},document.body.addEventListener("scroll",this.handleScroll.bind(this))}firstUpdated(){super.firstUpdated(),this.renderStatic(),this.dialogElem=this.querySelector(`[class*="${this.defaultClass}-msg"]`)}updated(t){super.updated(t),this.dialogElem||(this.dialogElem=this.querySelector(`[class*="${this.defaultClass}-msg"]`)),t.has("position")&&(this.position=this.getAttribute("position")||"center",this.getPosition(this.getBoundingClientRect(),this.dialogElem.getBoundingClientRect(),this.position),this.handleBoundary())}getPosition(t,i,n){if(d()){const l=this.querySelector(`.${this.defaultClass}-cont`),s=l?l.offsetTop:0;this.positionTop=s+i.height,this.positionLeft=0}else{const l={"top-left":()=>({top:-(t.height/2+i.height),left:-t.width/2}),top:()=>({top:-(t.height/2+i.height),left:(t.width-i.width)/2-t.width/2}),"top-right":()=>({top:-(t.height/2+i.height),left:-i.width+t.width/2}),"right-top":()=>({top:-t.height/2,left:t.width/2}),right:()=>({top:(t.height-i.height)/2-t.height/2,left:t.width/2}),"right-bottom":()=>({top:t.height/2-i.height,left:t.width/2}),"bottom-right":()=>({top:t.height/2,left:-i.width+t.width/2}),bottom:()=>({top:t.height/2,left:(t.width-i.width)/2-t.width/2}),"bottom-left":()=>({top:t.height/2,left:-t.width/2}),"left-bottom":()=>({top:t.height/2-i.height,left:-i.width-t.width/2}),left:()=>({top:(t.height-i.height)/2-t.height/2,left:-i.width-t.width/2}),"left-top":()=>({top:-t.height/2,left:-i.width-t.width/2})},s=()=>({top:0,left:0}),o=l[n]||s,{top:e,left:h}=o();this.positionTop=e,this.positionLeft=h}}handleBoundary(){const t=this.getBoundingClientRect(),i=this.dialogElem.getBoundingClientRect(),n=window.innerWidth,l=window.innerHeight,s=t.left<i.width,o=n-t.right<i.width,e=t.top<i.height,h=l-t.bottom<i.height;s&&!o&&e&&!h?this.position.startsWith("left")?this.bestPosition=this.position.replace("left","right"):(this.position.startsWith("top")||this.position.startsWith("bottom"))&&(this.bestPosition="bottom-left"):s&&!o&&!e&&!h?this.position.startsWith("left")?this.bestPosition=this.position.replace("left","right"):this.position.startsWith("top")?this.bestPosition="top-left":this.position.startsWith("bottom")&&(this.bestPosition="bottom-left"):!s&&!o&&e&&!h?this.position.startsWith("top")&&(this.bestPosition=this.position.replace("top","bottom")):!s&&o&&e&&!h?this.position.startsWith("right")?this.bestPosition=this.position.replace("right","left"):(this.position.startsWith("top")||this.position.startsWith("bottom"))&&(this.bestPosition="bottom-right"):!s&&o&&!e&&!h?this.position.startsWith("right")?this.bestPosition=this.position.replace("right","left"):this.position.startsWith("top")?this.bestPosition="top-right":this.position.startsWith("bottom")&&(this.bestPosition="bottom-right"):!s&&o&&!e&&h?this.position.startsWith("right")?this.bestPosition=this.position.replace("right","left"):(this.position.startsWith("top")||this.position.startsWith("bottom"))&&(this.bestPosition="top-right"):!s&&!o&&!e&&h?this.position.startsWith("bottom")&&(this.bestPosition=this.position.replace("bottom","top")):s&&!o&&!e&&h&&(this.position.startsWith("left")?this.bestPosition=this.position.replace("left","right"):(this.position.startsWith("top")||this.position.startsWith("bottom"))&&(this.bestPosition="top-left")),this.getPosition(t,i,this.bestPosition||this.position),this.bestPosition=null}handleScroll(){this.isActive&&(this.isActive=!1,this.requestUpdate())}handleToggle(){a.forEach(t=>{t!==this&&(t.isActive=!1,t.requestUpdate())}),this.isActive=!this.isActive,this.isActive?(a.add(this),requestAnimationFrame(()=>{this.handleBoundary()})):a.delete(this),this.requestUpdate()}renderStatic(){const t=this.customElementReplace("ig-msg"),i=this.customElementReplace("ig-cont");this.data={message:t};const n={click:()=>p`<button type="button" class="${this.defaultClass}-action" @click="${this.handleToggle}">${i}</button>`,mouseover:()=>p`<span class="${this.defaultClass}-action" @mouseover="${this.handleToggle}" @mouseout="${this.handleToggle}">${i}</span>`};this.data.cont=n[this.action]?n[this.action]():i}render(){if(this.data)return p`
				<div class="${this.mergedClass}${this.isActive?" active":""}">
					<div class="${this.defaultClass}-cont">
						${this.data.cont}
					</div>
					<dialog
						class="${this.defaultClass}-msg"
						style="${this.isActive&&this.position!=="center"?"transform: translate("+this.positionLeft+"px, "+this.positionTop+"px)":"transform: translate(-50%, -50%)"}"
						open
					>
						${this.data.message}
					</dialog>
				</div>
			`}}customElements.define(`${g}popover`,u);
