import { html } from 'lit';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';

export const UIGlobal = ({
	Class,
	Cont,
	backgroundColor,	// 추가: 배경색
	mBackgroundColor,	// 추가: 모바일 배경색
	borderColor,
	borderRadius,
	borderStyle,
	borderWidth,
	outlineColor,
	outlineStyle,
	outlineWidth,
	mBorderColor,
	mBorderRadius,
	mBorderStyle,
	mBorderWidth,
	mOutlineColor,
	mOutlineStyle,
	mOutlineWidth,
	display,
	mDisplay,
	flexDirection,
	flexWrap,
	gap,
	gapX,
	gapY,
	gridTemplateColumn,
	placeContent,
	placeContentX,
	placeContentY,
	placeItems,
	placeItemsX,
	placeItemsY,
	mFlexDirection,
	mFlexWrap,
	mGap,
	mGapX,
	mGapY,
	mGridTemplateColumn,
	mPlaceContent,
	mPlaceContentX,
	mPlaceContentY,
	mPlaceItems,
	mPlaceItemsX,
	mPlaceItemsY,
	margin,
	marginX,
	marginY,
	marginTop,
	marginBottom,
	marginLeft,
	marginRight,
	mMargin,
	mMarginTop,
	mMarginBottom,
	mMarginLeft,
	mMarginRight,
	mMarginX,
	mMarginY,
	padding,
	paddingX,
	paddingY,
	paddingTop,
	paddingBottom,
	paddingLeft,
	paddingRight,
	mPadding,
	mPaddingTop,
	mPaddingBottom,
	mPaddingLeft,
	mPaddingRight,
	mPaddingX,
	mPaddingY,
	overflow,
	overflowX,
	overflowY,
	mOverflow,
	mOverflowX,
	mOverflowY,
	position,
	left,
	right,
	top,
	bottom,
	zindex,
	mPosition,
	mLeft,
	mRight,
	mTop,
	mBottom,
	mZindex,
	width,
	height,
	mWidth,
	mHeight,
	align,
	color,
	combineUpright,
	decorationColor,
	decorationLine,
	decorationOffset,
	decorationStyle,
	decorationThickness,
	emphasisColor,
	emphasisPosition,
	emphasisStyle,
	lineHeight,
	orientation,
	size,
	spacing,
	weight,
	mAlign,
	mColor,
	mCombineUpright,
	mDecorationColor,
	mDecorationLine,
	mDecorationOffset,
	mDecorationStyle,
	mDecorationThickness,
	mEmphasisColor,
	mEmphasisPosition,
	mEmphasisStyle,
	mLineHeight,
	mOrientation,
	mSize,
	mSpacing,
	mWeight
}) => {
	// 수정된 부분: 스타일 속성을 배열로 정의 (core.js 참고)
	const styleProps = [
		// 배경색 관련
		{ key: '--bg-c', value: backgroundColor },
		{ key: '--m-bg-c', value: mBackgroundColor },

		// 테두리 관련
		{ key: '--bd-c', value: borderColor },
		{ key: '--bd-r', value: borderRadius },
		{ key: '--bd-s', value: borderStyle },
		{ key: '--bd-w', value: borderWidth },
		{ key: '--ol-c', value: outlineColor },
		{ key: '--ol-s', value: outlineStyle },
		{ key: '--ol-w', value: outlineWidth },
		{ key: '--m-bd-c', value: mBorderColor },
		{ key: '--m-bd-r', value: mBorderRadius },
		{ key: '--m-bd-s', value: mBorderStyle },
		{ key: '--m-bl-w', value: mBorderWidth },
		{ key: '--m-ol-c', value: mOutlineColor },
		{ key: '--m-ol-s', value: mOutlineStyle },
		{ key: '--m-ol-w', value: mOutlineWidth },

		// 디스플레이 관련
		{ key: '--dp', value: display },
		{ key: '--m-dp', value: mDisplay },

		// Flex & Grid 관련
		{ key: '--flex-d', value: flexDirection },
		{ key: '--flex-w', value: flexWrap },
		{ key: '--gap', value: gap, condition: v => v !== '' },
		{ key: '--gap-x', value: gapX, condition: v => v !== '' },
		{ key: '--gap-y', value: gapY, condition: v => v !== '' },
		{ key: '--grid-t-col', value: gridTemplateColumn },
		{ key: '--content', value: placeContent },
		{ key: '--content-x', value: placeContentX },
		{ key: '--content-y', value: placeContentY },
		{ key: '--items', value: placeItems },
		{ key: '--items-x', value: placeItemsX },
		{ key: '--items-y', value: placeItemsY },
		{ key: '--m-flex-d', value: mFlexDirection },
		{ key: '--m-flex-w', value: mFlexWrap },
		{ key: '--m-gap', value: mGap, condition: v => v !== '' },
		{ key: '--m-gap-x', value: mGapX, condition: v => v !== '' },
		{ key: '--m-gap-y', value: mGapY, condition: v => v !== '' },
		{ key: '--m-grid-t-col', value: mGridTemplateColumn },
		{ key: '--m-content', value: mPlaceContent },
		{ key: '--m-content-x', value: mPlaceContentX },
		{ key: '--m-content-y', value: mPlaceContentY },
		{ key: '--m-items', value: mPlaceItems },
		{ key: '--m-items-x', value: mPlaceItemsX },
		{ key: '--m-items-y', value: mPlaceItemsY },

		// Margin 관련
		{ key: '--mg-a', value: margin, condition: v => v !== '' },
		{ key: '--mg-x', value: marginX, condition: v => v !== '' },
		{ key: '--mg-y', value: marginY, condition: v => v !== '' },
		{ key: '--mg-t', value: marginTop, condition: v => v !== '' },
		{ key: '--mg-b', value: marginBottom, condition: v => v !== '' },
		{ key: '--mg-l', value: marginLeft, condition: v => v !== '' },
		{ key: '--mg-r', value: marginRight, condition: v => v !== '' },
		{ key: '--m-mg-a', value: mMargin, condition: v => v !== '' },
		{ key: '--m-mg-x', value: mMarginTop, condition: v => v !== '' },
		{ key: '--m-mg-y', value: mMarginBottom, condition: v => v !== '' },
		{ key: '--m-mg-t', value: mMarginLeft, condition: v => v !== '' },
		{ key: '--m-mg-b', value: mMarginRight, condition: v => v !== '' },
		{ key: '--m-mg-l', value: mMarginX, condition: v => v !== '' },
		{ key: '--m-mg-r', value: mMarginY, condition: v => v !== '' },

		// Padding 관련
		{ key: '--pd-a', value: padding, condition: v => v !== '' },
		{ key: '--pd-x', value: paddingX, condition: v => v !== '' },
		{ key: '--pd-y', value: paddingY, condition: v => v !== '' },
		{ key: '--pd-t', value: paddingTop, condition: v => v !== '' },
		{ key: '--pd-b', value: paddingBottom, condition: v => v !== '' },
		{ key: '--pd-l', value: paddingLeft, condition: v => v !== '' },
		{ key: '--pd-r', value: paddingRight, condition: v => v !== '' },
		{ key: '--m-pd-a', value: mPadding, condition: v => v !== '' },
		{ key: '--m-pd-x', value: mPaddingTop, condition: v => v !== '' },
		{ key: '--m-pd-y', value: mPaddingBottom, condition: v => v !== '' },
		{ key: '--m-pd-t', value: mPaddingLeft, condition: v => v !== '' },
		{ key: '--m-pd-b', value: mPaddingRight, condition: v => v !== '' },
		{ key: '--m-pd-l', value: mPaddingX, condition: v => v !== '' },
		{ key: '--m-pd-r', value: mPaddingY, condition: v => v !== '' },

		// Overflow 관련 (visible이 아닐 때만 적용)
		{ key: '--ovf', value: overflow, condition: v => v !== 'visible' },
		{ key: '--ovf-x', value: overflowX, condition: v => v !== 'visible' },
		{ key: '--ovf-y', value: overflowY, condition: v => v !== 'visible' },
		{ key: '--m-ovf', value: mOverflow, condition: v => v !== 'visible' },
		{ key: '--m-ovf-x', value: mOverflowX, condition: v => v !== 'visible' },
		{ key: '--m-ovf-y', value: mOverflowY, condition: v => v !== 'visible' },

		// Position 관련 (static이 아닐 때만 적용)
		{ key: '--pos', value: position, condition: v => v !== 'static' },
		{ key: '--left', value: left, condition: v => v !== '' },
		{ key: '--right', value: right, condition: v => v !== '' },
		{ key: '--top', value: top, condition: v => v !== '' },
		{ key: '--bottom', value: bottom, condition: v => v !== '' },
		{ key: '--z-idx', value: zindex, condition: v => v !== '' },
		{ key: '--m-pos', value: mPosition, condition: v => v !== 'static' },
		{ key: '--m-left', value: mLeft, condition: v => v !== '' },
		{ key: '--m-right', value: mRight, condition: v => v !== '' },
		{ key: '--m-top', value: mTop, condition: v => v !== '' },
		{ key: '--m-bottom', value: mBottom, condition: v => v !== '' },
		{ key: '--m-z-idx', value: mZindex, condition: v => v !== '' },

		// Width & Height 관련
		{ key: '--w', value: width, condition: v => v !== '' },
		{ key: '--h', value: height, condition: v => v !== '' },
		{ key: '--m-w', value: mWidth, condition: v => v !== '' },
		{ key: '--m-h', value: mHeight, condition: v => v !== '' },

		// 타이포그래피 관련
		{ key: '--txt-a', value: align, condition: v => v !== '' },
		{ key: '--ft-c', value: color },
		{ key: '--txt-up', value: combineUpright, condition: v => v !== 'off' },
		{ key: '--txt-deco-c', value: decorationColor },
		{ key: '--txt-deco-l', value: decorationLine, condition: v => v !== 'off' },
		{ key: '--txt-deco-uo', value: decorationOffset, condition: v => v !== '' },
		{ key: '--txt-deco-s', value: decorationStyle, condition: v => v !== 'off' },
		{ key: '--txt-deco-t', value: decorationThickness, condition: v => v !== '' },
		{ key: '--txt-emp-c', value: emphasisColor, condition: v => v !== '' },
		{ key: '--txt-emp-p', value: emphasisPosition, condition: v => v !== 'off' },
		{ key: '--txt-emp-s', value: emphasisStyle, condition: v => v !== 'off' },
		{ key: '--txt-lh', value: lineHeight, condition: v => v !== '' },
		{ key: '--txt-ori', value: orientation, condition: v => v !== 'off' },
		{ key: '--ft-s', value: size, condition: v => v !== '' },
		{ key: '--txt-ls', value: spacing, condition: v => v !== '' },
		{ key: '--ft-w', value: weight, condition: v => v !== '' },
		{ key: '--m-txt-a', value: mAlign, condition: v => v !== '' },
		{ key: '--m-ft-c', value: mColor },
		{ key: '--m-txt-up', value: mCombineUpright, condition: v => v !== 'off' },
		{ key: '--txt-deco-c', value: mDecorationColor }, // ※ 네이밍이 중복되므로 core.js에 맞게 '--m-txt-deco-c'로 수정 필요할 수 있음
		{ key: '--m-txt-deco-l', value: mDecorationLine, condition: v => v !== 'off' },
		{ key: '--m-txt-deco-uo', value: mDecorationOffset, condition: v => v !== '' },
		{ key: '--m-txt-deco-s', value: mDecorationStyle, condition: v => v !== 'off' },
		{ key: '--m-txt-deco-t', value: mDecorationThickness, condition: v => v !== '' },
		{ key: '--m-txt-emp-c', value: mEmphasisColor, condition: v => v !== '' },
		{ key: '--m-txt-emp-p', value: mEmphasisPosition, condition: v => v !== 'off' },
		{ key: '--m-txt-emp-s', value: mEmphasisStyle, condition: v => v !== 'off' },
		{ key: '--m-txt-lh', value: mLineHeight, condition: v => v !== '' },
		{ key: '--m-txt-ori', value: mOrientation, condition: v => v !== 'off' },
		{ key: '--m-ft-s', value: mSize, condition: v => v !== '' },
		{ key: '--m-txt-ls', value: mSpacing, condition: v => v !== '' },
		{ key: '--m-ft-w', value: mWeight, condition: v => v !== '' }
	];

	// 수정된 부분: 조건에 맞는 스타일 속성만 style 문자열에 추가 (core.js 참고)
	let Style = '';
	for (const { key, value, condition } of styleProps) {
		// value가 undefined이면 건너뜀
		if (value !== undefined && (condition ? condition(value) : value !== '')) {
			Style += `${key}:${value};`;
		}
	}

	return html`<div class='${Class}' style='${Style}'>${unsafeHTML(Cont)}</div>`;
};